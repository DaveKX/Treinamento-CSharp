@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@page "/cadastro"
@rendermode InteractiveServer
@inject ILocalStorageService localStorage
@inject IDialogService DialogService


<PageTitle>Cadastro</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(() => OpenDialogPessoa("Cadastrar"))">Adicionar</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@if (pessoas == null)
{
    <MudProgressCircular Color="Color.Success" Indeterminate="true" />
}
else
{
    <MudDataGrid Items="@pessoas" ReadOnly="false" SortMode="@SortMode.Single">
        <Columns>
            <HierarchyColumn T="Pessoa" />
            <PropertyColumn Property="x => x.Id" Title="ID" />
            <PropertyColumn Property="x => x.Nome" />
            <PropertyColumn Property="x => x.Telefone" />
            <PropertyColumn Property="x => x.Endereco" />
            <TemplateColumn CellClass="d-flex justify-center">
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenAddPokemonDialog(context.Item))">Adicionar Pokémon</MudButton>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenDialogPessoa("Editar", context.Item))">Editar</MudButton>
                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary" OnClick="@(() => OpenDialogPessoa("Deletar", context.Item))">Deletar</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            @if (context.Item.Pokemons != null && context.Item.Pokemons.Any())
            {
                <MudCard>
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h6">Pokemons</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        @foreach (var pokemon in context.Item.Pokemons)
                        {
                            <MudPaper Class="pa-3 my-2">
                                <MudText Typo="Typo.body1"><b>Nome:</b> @pokemon.Nome</MudText>
                                <MudText Typo="Typo.body1"><b>Número Pokédex:</b> @pokemon.NumeroPokedex</MudText>
                                <MudText Typo="Typo.body1"><b>Tipo:</b> @pokemon.Tipo</MudText>
                                <MudText Typo="Typo.body1"><b>Geração:</b> @pokemon.Geracao</MudText>
                                <MudText Typo="Typo.body1"><b>Shiny:</b> @(pokemon.Shiny ? "Sim" : "Não")</MudText>
                                <MudStack Row>
                                    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary">Editar</MudButton>
                                    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary">Deletar</MudButton>
                                </MudStack>
                            </MudPaper>
                        }
                    </MudCardContent>
                </MudCard>
            }
            else
            {
                <MudText Typo="Typo.body2">Não possui pokémons.</MudText>
            }
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Pessoa" />
        </PagerContent>
    </MudDataGrid>
}


@code {
    bool success;
    List<Pessoa> pessoas = new();
    Pessoa pessoa = new();
    const string stringKey = "pessoas";
    bool isInitialized;

    private async Task OpenAddPokemonDialog(Pessoa pessoa)
    {
        var pessoaCopia = new Pessoa
            {
                Id = pessoa.Id,
                Nome = pessoa.Nome,
                Telefone = pessoa.Telefone,
                Endereco = pessoa.Endereco,
                Pokemons = new List<Pokemon>(pessoa.Pokemons)
            };
        var parameters = new DialogParameters<DialogAddPokemon>
        {
            { x=>x.Pessoa, pessoaCopia },
            { x=>x.addPokemon, EventCallback.Factory.Create<Pokemon>(this, (Pokemon p) => AddPokemon(p, pessoaCopia)) }
        };
        var options = new DialogOptions() { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<DialogAddPokemon>("Adicionar Pokémon", parameters, options);
    }

    private async Task OpenDialogPessoa(string acao, Pessoa pessoa = null)
    {
        var options = new DialogOptions()
            {
                CloseOnEscapeKey = true
            };

        pessoa ??= new Pessoa();
        var pessoaCopia = new Pessoa
            {
                Id = pessoa.Id,
                Nome = pessoa.Nome,
                Telefone = pessoa.Telefone,
                Endereco = pessoa.Endereco,
                Pokemons = new List<Pokemon>(pessoa.Pokemons)
            };

        var dialogParameters = new DialogParameters<DialogPessoa>
    {
        { x => x.pessoa, pessoaCopia },
        { x => x.acao, acao },
        { x => x.addPessoa, EventCallback.Factory.Create<Pessoa>(this, AddPessoa) },
        { x => x.editarPessoa, EventCallback.Factory.Create<Pessoa>(this, EditarPessoa) },
        { x => x.deletarPessoa, EventCallback.Factory.Create<Pessoa>(this, DeletarPessoa) }
    };

        var dialog = await DialogService.ShowAsync<DialogPessoa>("Pessoa", dialogParameters, options);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadPessoasFromLocalStorage();
            isInitialized = true;
        }
    }

    private async Task LoadPessoasFromLocalStorage()
    {
        await Task.Delay(100);
        var storedPessoas = await localStorage.GetItemAsync<List<Pessoa>>(stringKey);
        if (storedPessoas != null)
        {
            pessoas = storedPessoas;
        }
        else
        {
            pessoas = new List<Pessoa>();
        }
        StateHasChanged();
    }

    private async Task AtualizaLocalStorage()
    {
        await localStorage.SetItemAsync(stringKey, pessoas);
    }

    private async Task AddPessoa(Pessoa pessoa)
    {
        if (pessoas.Count != 0)
        {
            var lastID = pessoas.Last().Id;
            pessoa.Id = lastID + 1;
        }
        else
        {
            pessoa.Id = 0;
        }
        pessoas.Add(pessoa);
        await AtualizaLocalStorage();
        pessoa = new();
    }

    private async Task DeletarPessoa(Pessoa p)
    {
        var pessoaIndex = BuscarPessoaIndexById(p.Id);
        if (pessoaIndex == -1)
            return;

        pessoas.RemoveAt(pessoaIndex);
        await AtualizaLocalStorage();
    }

    private async Task EditarPessoa(Pessoa p)
    {
        var pessoaIndex = BuscarPessoaIndexById(p.Id);
        if (pessoaIndex == -1)
            return;

        pessoas[pessoaIndex] = p;
        await AtualizaLocalStorage();
    }

    private int BuscarPessoaIndexById(int id)
    {
        return pessoas.FindIndex(p => p.Id == id);
    }

    private async Task AddPokemon(Pokemon pokemon, Pessoa p)
    {
        var pessoaIndex = BuscarPessoaIndexById(p.Id);
        if (pessoaIndex == -1)
            return;
        pokemon.Pessoa = p;
        pokemon.PessoaId = p.Id;
        pessoas[pessoaIndex].Pokemons.Add(pokemon);
        await AtualizaLocalStorage();
    }

}
